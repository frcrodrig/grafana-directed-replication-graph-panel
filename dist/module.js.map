{"version":3,"sources":["../src/module.js"],"names":["config","MetricsPanelCtrl","angular","DataSet","Network","nodes","edges","GraphCtrl","$scope","$injector","$rootScope","$http","rootScope","scope","timeSrv","get","templateSrv","events","on","onDataReceived","bind","data","options","shape","color","background","border","font","length","arrows","layout","randomSeed","autoResize","height","width","dataList","series","map","seriesHandler","new_series","series_counter","i","panel","targets","target","alias","datapoints","data_edge","label","data_node","indexOf","target_id","substring","query_value","id","value","updated","_data","add","update","subtraction","parseInt","split","opacity","e","node","remove","edge","seriesData","templateUrl","module","directive","restrict","transclude","link","element","attr","networkEvents","network","$watch","destroy","forEach","callback","event","String","onload","isFunction","$watchCollection","setOptions","factory"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\nimport {\n    MetricsPanelCtrl\n} from 'app/plugins/sdk';\nimport angular from 'angular';\nimport {\n    DataSet,\n    Network\n} from './external/vis.min';\n\nvar nodes = [];\nvar edges = [];\nexport class GraphCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $rootScope, $http) {\n        super($scope, $injector);\n        this.rootScope = $rootScope;\n        this.scope = $scope;\n        this.timeSrv = $injector.get('timeSrv');\n        this.templateSrv = $injector.get('templateSrv');\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        nodes = new DataSet(nodes);\n        edges = new DataSet(edges);\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n        var options = {\n            nodes: {\n                shape: 'dot',\n                color: {\n                    background: \"#ffd800\",\n                    border: \"#ff6400\"\n                },\n                font: {\n                    color: \"#fff\"\n                }\n            },\n            edges: {\n                length: 400,\n                arrows: 'to',\n                color: {\n                    color: '#ff6400'\n                }\n            },\n            layout: {\n                randomSeed: 528861\n            },\n            autoResize: true,\n            height: '100%',\n            width: '100%'\n        };\n        $scope.data = data;\n        $scope.options = options;\n    }\n\n    onDataReceived(dataList) {\n        this.series = dataList.map(this.seriesHandler.bind(this));\n        var new_series = []\n        var series_counter = 0\n        for(var i = 0; i < this.panel.targets.length; i++){\n            if((this.series.length > 0) && (this.series[series_counter].target == this.panel.targets[i].alias)){\n                new_series[i] = this.series[series_counter]\n                if(series_counter+1 < this.series.length){\n                    series_counter++;\n                }\n                \n            } else {\n                new_series[i] = {target: \"0\", datapoints: [0]};\n            }\n        }\n        this.series = new_series;\n        var data_edge = {\n            label: \"\"\n        };\n        var data_node = {};\n        for (var i = 0; i < this.series.length; i++) {\n            try {\n                data_edge = {\n                    label: \"\"\n                };\n                data_node = {};\n                if (this.series[i].target.indexOf(\"#\") != -1) {\n                    var target_id = this.series[i].target.substring(1, this.series[i].target.length);\n                    var query_value = this.series[i].datapoints[this.series[i].datapoints.length - 1][0];\n                    data_node = {\n                        id: target_id,\n                        value: query_value,\n                        label: target_id + \"\\n\" + query_value,\n                        updated: 1\n                    }\n                    if (!(target_id in nodes._data)) {\n                        nodes.add(data_node);\n                    } else {\n                        nodes.update(data_node);\n                    }\n                }\n\n                if (this.series[i].target.indexOf(\"=\") != -1) {\n                    if (this.series[i].target.indexOf(\"*\") != -1) {\n                        this.series[i].target = this.series[i].target.substring(1, this.series[i].target.length)\n                        var subtraction = 0;\n\n                        if (this.series[i].target.indexOf(\"-\") != -1) {\n                            subtraction = this.series[parseInt(this.series[i].target.split(\"-\")[1], 10)].datapoints[this.series[i].datapoints.length - 1][0];\n                            this.series[i].target = this.series[i].target.split(\"-\")[0];\n\n                        }\n\n                        if (this.series[i].target.indexOf(\"+\") != -1) {\n                            this.series[i].target = this.series[i].target.substring(1, this.series[i].target.length);\n                            data_edge['label'] = edges.get(this.series[i].target).label + \" / \" + (this.series[i].datapoints[this.series[i].datapoints.length - 1][0] - subtraction);\n                        } else {\n                            data_edge['label'] = this.series[i].datapoints[this.series[i].datapoints.length - 1][0] - subtraction;\n                        }\n                    }\n                    data_edge['id'] = this.series[i].target;\n                    data_edge['from'] = this.series[i].target.split(\"=\")[0];\n                    data_edge['color'] = {\n                        color: '5a910a',\n                        opacity: this.series[i].datapoints[this.series[i].datapoints.length - 1][0] / 100\n                    };\n                    data_edge['to'] = this.series[i].target.split(\"=\")[1];\n                    data_edge['updated'] = 1;\n                    if (!(this.series[i].target in edges._data)) {\n                        edges.add(data_edge);\n                    } else {\n                        edges.update(data_edge);\n                    }\n\n                }\n            } catch (e) {\n\n                continue\n            }\n\n        }\n        for (var node in nodes._data) {\n            if (!(nodes._data[node].updated)) {\n                nodes.remove({\n                    id: node\n                });\n            } else {\n                nodes._data[node].updated = !nodes._data[node].updated;\n            }\n        }\n        for (var edge in edges._data) {\n            if (!(edges._data[edge].updated)) {\n                edges.remove({\n                    id: edge\n                });\n            } else {\n                edges._data[edge].updated = !edges._data[edge].updated;\n            }\n\n        }\n\n    }\n    seriesHandler(seriesData) {\n\n\n        var series = seriesData;\n        return series;\n    }\n\n}\n\n\n\nGraphCtrl.templateUrl = 'module.html';\n\nangular.module('grafana.directives')\n    .directive('visNetwork', function() {\n        return {\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                data: '=',\n                options: '=',\n                events: '='\n            },\n            link: function(scope, element, attr) {\n                var networkEvents = [\n                    'click',\n                    'doubleClick',\n                    'oncontext',\n                    'hold',\n                    'release',\n                    'selectNode',\n                    'selectEdge',\n                    'deselectNode',\n                    'deselectEdge',\n                    'dragStart',\n                    'dragging',\n                    'dragEnd',\n                    'hoverNode',\n                    'blurNode',\n                    'zoom',\n                    'showPopup',\n                    'hidePopup',\n                    'startStabilizing',\n                    'stabilizationProgress',\n                    'stabilizationIterationsDone',\n                    'stabilized',\n                    'resize',\n                    'initRedraw',\n                    'beforeDrawing',\n                    'afterDrawing',\n                    'animationFinished'\n\n                ];\n\n                var network = null;\n\n                scope.$watch('data', function() {\n                    // Sanity check\n                    if (scope.data == null) {\n                        return;\n                    }\n\n                    // If we've actually changed the data set, then recreate the graph\n                    // We can always update the data by adding more data to the existing data set\n                    if (network != null) {\n                        network.destroy();\n                    }\n\n                    // Create the graph2d object\n                    network = new Network(element[0], scope.data, scope.options);\n\n                    // Attach an event handler if defined\n                    angular.forEach(scope.events, function(callback, event) {\n                        if (networkEvents.indexOf(String(event)) >= 0) {\n                            network.on(event, callback);\n                        }\n                    });\n\n                    // onLoad callback\n                    if (scope.events != null && scope.events.onload != null &&\n                        angular.isFunction(scope.events.onload)) {\n                        scope.events.onload(network);\n                    }\n                });\n\n                scope.$watchCollection('options', function(options) {\n                    if (network == null) {\n                        return;\n                    }\n                    network.setOptions(options);\n                });\n            }\n        };\n    });\nangular.module('grafana.services')\n    .factory('VisDataSet', function() {\n        'use strict';\n        return function(data, options) {\n            // Create the new dataSets\n            return new DataSet(data, options);\n        };\n    })\n\nexport {\n    GraphCtrl as PanelCtrl\n};"]}